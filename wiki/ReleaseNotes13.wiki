= Release Notes for PowerMock 1.3 =

PowerMock 1.3 is one of biggest releases to date and there's been lots of changes both internally and externally.

== Non-backward compatible changes ==
*EasyMock API specific*
  * D


*Mockito API specific*
  * Removed `mockStatic(Class<?> type, Method method, Method... methods)`, `mockStaticPartial`, `mockPartial`, `mock(Class<T> type, Method... methods)` & `mock(Class<T> type, Method... methods)` from the Mockito extension API. You should use `PowerMockito.spy` instead

*Common*
  * PowerMock now changes the context class-loader to the MockClassloader which means that you don't need to use @PowerMockIgnore as often as before. This solves many issues with frameworks that creates new instances using reflection like log4j, hibernate and many XML frameworks. If you've been using PowerMockIgnore in your test you may need to remove it (or update the ignored package list) otherwise the test might fail.


== Other notable changes ==
*EasyMock API specific*
  * PowerMock now supports mocking instance methods of final system classes (such as java.lang.String). To do this you need to prepare the class that invokes the method of the system class. Note that partial mocking of instance methods in final system classes doesn't yet work if a constructor needs to be invoked on the mock.


*Mockito API specific*
  * Upgraded the Mockito extension to use Mockito 1.8  
  * Mocking of static methods in final system classes now works
  * When using the PowerMock Mock annotation with Mockito the method names (previously used for partial mocking) are ignored. They are no longer needed, just use PowerMockito.spy instead.
  * Support for private method expectations using `PowerMockito.when(..)`
  * You can now mock construction of new objects using the Mockito extension. To do so use `PowerMockito#whenNew(..)`, e.g. `whenNew(MyClass.class).withArguments(myObject1, myObject2).thenReturn(myMock)`. Verification can be done with `PowerMockito#verifyNew(..), e.g. verifyNew(MyClass.class).withArguments(myObject1, myObject2)`.


*Common*
  * Classes prepared for test in parent test classes are now automatically prepared for test as well. I.e. if Test Case A extends Test Case B and A prepares X.class and B prepares Y.class then both X and Y will be prepared for test. Before only X was prepared for test.
  * Upgraded the JUnit runner to JUnit 4.7 and also implemented support for JUnit 4.7 rules.
  * Annotation support has been integrated in the test runners so there's no need to specify the AnnotationEnabler listener using `@PowerMockListener(AnnotationEnabler.class)`. It works both for the EasyMock and Mockito extension API's.

== Deprecation ==
  * Deprecated `Whitebox#getInternalState(Object object, String fieldName, Class<?> where, Class<T> type)`. Use `"Whitebox.<Type> getInternalState(Object object, String fieldName, Class<?> where)"` instead.
  * Deprecated `org.powermock.core.classloader.annotations.Mock`, you should now use the Mock annotation in respective extension API instead. For EasyMock this is `org.powermock.api.easymock.annotation.Mock` and for Mockito it's `org.mockito.Mock`.
  * Deprecated `org.powermock.api.easymock.powermocklistener.AnnotationEnabler` and `org.powermock.api.mockito.powermocklistener.AnnotationEnabler`. You should just remove them because they're now integrated with the test runner.


== Removed deprecations ==


== Minor changes ==
See change log for more details